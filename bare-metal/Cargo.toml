[package]
name = "rust-os"
version = "0.1.0"
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
bootloader = "0.9.23"
# 创建引导映像
# 要将可执行程序转换为可引导的映像（bootable disk image），我们需要把它和引导程序链接。这里，引导程序将负责初始化 CPU 并加载我们的内核。
# 编写引导程序并不容易，所以我们不编写自己的引导程序，而是使用已有的 bootloader 包；无需依赖于 C 语言，这个包基于 Rust 代码和内联汇编，实现了一个五脏俱全的 BIOS 引导程序。为了用它启动我们的内核，我们需要将它添加为一个依赖项，

# boot image
# 只添加引导程序为依赖项，并不足以创建一个可引导的磁盘映像；我们还需要内核编译完成之后，将内核和引导程序组合在一起。然而，截至目前，原生的 cargo 并不支持在编译完成后添加其它步骤（详见这个 issue）。
# 为了解决这个问题，我们建议使用 bootimage 工具——它将会在内核编译完毕后，将它和引导程序组合在一起，最终创建一个能够引导的磁盘映像。
# cargo install bootimage
# 为了运行 bootimage 以及编译引导程序，我们需要安装 rustup 模块 llvm-tools-preview——我们可以使用 rustup component add llvm-tools-preview 来安装这个工具。

# 成功安装 bootimage 后，创建一个可引导的磁盘映像就变得相当容易。我们来输入下面的命令：
# cargo bootimage

# 可以看到的是，bootimage 工具开始使用 cargo build 编译你的内核，所以它将增量编译我们修改后的源码。在这之后，它会编译内核的引导程序，这可能将花费一定的时间；但和所有其它依赖包相似的是，在首次编译后，产生的二进制文件将被缓存下来——这将显著地加速后续的编译过程。最终，bootimage 将把内核和引导程序组合为一个可引导的磁盘映像。
# 运行这行命令之后，我们应该能在 target/x86_64-blog_os/debug 目录内找到我们的映像文件 bootimage-blog_os.bin。我们可以在虚拟机内启动它，也可以刻录到 U 盘上以便在真机上启动。（需要注意的是，因为文件格式不同，这里的 bin 文件并不是一个光驱映像，所以将它刻录到光盘不会起作用。）

# 事实上，在这行命令背后，bootimage 工具执行了三个步骤：
# 1. 编译我们的内核为一个 ELF（Executable and Linkable Format）文件；
# 2. 编译引导程序为独立的可执行文件；
# 3. 将内核 ELF 文件按字节拼接（append by bytes）到引导程序的末端。
# 当机器启动时，引导程序将会读取并解析拼接在其后的 ELF 文件。这之后，它将把程序片段映射到分页表（page table）中的虚拟地址（virtual address），清零 BSS段（BSS segment），还将创建一个栈。最终它将读取入口点地址（entry point address）——我们程序中 _start 函数的位置——并跳转到这个位置。

# Booting it in qemu
# (in rust-os dir) `qemu-system-x86_64 -drive format=raw,file=target/x86_64-rust_os/debug/bootimage-rust-os.bin`
# release mouse: control + option + q

# 要添加 volatile 包为项目的依赖项（dependency），我们可以在 Cargo.toml 文件的 dependencies 中添加下面的代码：
volatile = "0.2.6"

# eh_personality
# 用于实现栈展开（stack unwinding）

# 禁用栈展开
# 在其它一些情况下，栈展开并不是迫切需求的功能；因此，Rust 提供了在 panic 时中止（abort on panic）的选项。
# 这个选项能禁用栈展开相关的标志信息生成，也因此能缩小生成的二进制程序的长度
[profile.dev]
panic = "abort"

[profile.release]
panic = "abort"
# 这些选项能将 dev 配置（dev profile）和 release 配置（release profile）的 panic 策略设为 abort。
# dev 配置适用于 cargo build，而 release 配置适用于 cargo build --release。现在编译器应该不再要求我们提供 eh_personality 语言项实现。